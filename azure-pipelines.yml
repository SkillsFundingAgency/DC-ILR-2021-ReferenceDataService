
name: $(VersionNumberMajor).$(VersionNumberMinor)$(Rev:.rrrr)

resources:
- repo: self
  fetchDepth: 15

variables: # pipeline-level
- name: 'VersionNumberMajor'
  value:  '0'
- name: 'VersionNumberMinor'
  value: '1'

stages:
- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build
    variables: # job-level
      Build_Configuration: 'Release'
      Build_Platform: 'Any CPU'
      Build_PlatformX64: 'x64'
      Build_MSbuildVersion: '16.0'
      Solution_ToBuild: '**\*.sln'  
	  Solution_ServiceFabricToBuild: '**\*.sfproj'
      DotNetCore_Version: '2.2.207'  
      Nuget_Feed: 'dct-pkg'
      Nuget_Version: '< 4.8.0'

    pool:
      name: DCT
      demands:
      - IsBuildServer
      - ServiceFabricSDK
      #- ServiceFabricSDKVersion -equals 65

    steps:
	- task: DotNetCoreInstaller@0
	  displayName: 'Use .NET Core sdk $(DotNetCoreVersion)'
	  inputs:
		version: $(DotNetCoreVersion)

	- task: VisualStudioTestPlatformInstaller@1
	  displayName: 'Visual Studio Test Platform Installer'
	  inputs:
		versionSelector: latestStable

	- task: NuGetToolInstaller@0
	  displayName: 'Use NuGet < $(Nuget_Version)'
	  inputs:
		versionSpec: '< $(Nuget_Version)'
		checkLatest: true

	- task: DotNetCoreCLI@2
	  enabled: true
	  displayName: 'dotnet restore'
	  inputs:
		command: restore
		projects: '**\*.csproj'
		vstsFeed: '$(Nuget_Feed)'
	#    includeNuGetOrg: false
	#    noCache: true

	- task: NuGetCommand@2
	  displayName: 'NuGet restore'
	  inputs:
		restoreSolution: '**/*.sln'
		vstsFeed: '$(Nuget_Feed)'
		noCache: true

	- task: MSBuild@1
	  displayName: 'Build solution **/*.sln'
	  inputs:
		msbuildVersion: $(Build_MSbuildVersion)
		msbuildArchitecture: x64
		platform: '$(Build_Platform)'
		configuration: '$(Build_Configuration)'
		msbuildArguments: '-p:version=$(Build.BuildNumber) -p:FileVersion=$(Build.BuildNumber) -p:SkipInvalidConfigurations=true'
		clean: true
		maximumCpuCount: true
		restoreNugetPackages: true
		logProjectEvents: true
		createLogFile: true

	- task: MSBuild@1
	  displayName: 'Build and Package - Service Fabric Config'
	  inputs:
		solution: '$(Solution_ServiceFabricToBuild)'
		msbuildArchitecture: x64
		platform: '$(Build_PlatformX64)'
		configuration: '$(Build_Configuration)'
		msbuildArguments: '/t:Package /p:PackageLocation=$(build.artifactstagingdirectory)\ServiceFabric\ApplicationPackage  /p:version=$(Build.BuildNumber) /p:FileVersion=$(Build.BuildNumber) -p:SkipInvalidConfigurations=true'
		clean: false
		maximumCpuCount: true
		logProjectEvents: true
		createLogFile: true
			
	- task: DeleteFiles@1
	  displayName: 'Delete Symbols files from $(build.artifactstagingdirectory)\ServiceFabric\ApplicationPackage '
	  inputs:
		SourceFolder: '$(build.artifactstagingdirectory)\ServiceFabric\ApplicationPackage'
		Contents: '**\*.pdb'

	- task: CopyFiles@2
	  displayName: 'Copy Nuget Interface Packages Files - Artifact NugetInterface Directory'
	  inputs:
		SourceFolder: '$(build.sourcesdirectory)\src'
		Contents: |
		 **\*$(Build_Configuration)*\*Interface.nupkg
		 !**\packages\**
		 !**\bin\x64\**
		TargetFolder: '$(build.artifactstagingdirectory)\Nuget\Interface'
		CleanTargetFolder: true
		flattenFolders: true

	- task: CopyFiles@2
	  displayName: 'Copy NugetPackages Files - Artifact NugetPackages Directory'
	  inputs:
		SourceFolder: '$(build.sourcesdirectory)\src'
		Contents: |
		 **\*$(Build_Configuration)*\*.nupkg
		 !**\packages\**
		 !**\bin\x64\**
		TargetFolder: '$(build.artifactstagingdirectory)\Nuget\Packages'
		CleanTargetFolder: true
		flattenFolders: true
			
	- task: CopyFiles@2
	  displayName: 'Copy Database Files - Artifact Databases Directory'
	  inputs:
		SourceFolder: '$(build.sourcesdirectory)'
		Contents: |
		 **\*.Database\**\*.dacpac
		TargetFolder: '$(build.artifactstagingdirectory)\Databases'
		CleanTargetFolder: true
		flattenFolders: true
		

	- task: CopyFiles@2
	  displayName: 'Copy Files - $(build.artifactstagingdirectory)\ServiceFabric\PublishProfiles'
	  inputs:
		SourceFolder: '$(build.sourcesdirectory)\src'
		Contents: '**\PublishProfiles\Cloud.xml'
		TargetFolder: '$(build.artifactstagingdirectory)\ServiceFabric\PublishProfiles'
		CleanTargetFolder: true
		flattenFolders: true

	- task: CopyFiles@2
	  displayName: 'Copy Files - $(build.artifactstagingdirectory)\ServiceFabric\ApplicationParameters'
	  inputs:
		SourceFolder: '$(build.sourcesdirectory)\src'
		Contents: '**\ApplicationParameters\*.xml'
		TargetFolder: '$(build.artifactstagingdirectory)\ServiceFabric\ApplicationParameters'
		CleanTargetFolder: true
		flattenFolders: true

	- task: ServiceFabricUpdateManifests@2
	  displayName: 'Update Service Fabric Manifests (Manifest versions)'
	  enabled: true
	  inputs:
		applicationPackagePath: '$(build.artifactstagingdirectory)\ServiceFabric\ApplicationPackage '
		versionBehavior: Replace
	   
	- task: DotNetCoreCLI@2
	  displayName: 'Run xUnit Test - Core Framework'
	  enabled: true
	  inputs:
		command: test
		projects: 'src/*Tests/*.csproj'
		arguments: '--configuration $(Build_Configuration) --collect "Code coverage"'
		
	- task: VSTest@2
	  displayName: 'VsTest - testAssemblies'
	  enabled: false
	  inputs:
		testAssemblyVer2: |
		 **\*tests.dll
		 !**\*Database.Tests*\**
		 !**\packages\**
		 !**\obj\**
		configuration: '$(Build_Configuration)'

	- task: PublishSymbols@2
	  displayName: 'Publish symbols path'
	  enabled: false
	  inputs:
		SearchPattern: '**\bin\**\*.pdb'
		PublishSymbols: false
	  continueOnError: true

	- task: PublishBuildArtifacts@1
	  displayName: 'Publish Artifact: ServiceFabric'
	  enabled: true
	  inputs:
		ArtifactName: ServiceFabric
		PathtoPublish: '$(build.artifactstagingdirectory)\ServiceFabric'

	- task: PublishBuildArtifacts@1
	  displayName: 'Publish Artifact: NugetPackages'
	  enabled: true
	  inputs:
		ArtifactName: NugetPackages
		PathtoPublish: '$(build.artifactstagingdirectory)\Nuget'

	- task: PublishBuildArtifacts@1
	  displayName: 'Publish Artifact: Databases'
	  enabled: true
	  inputs:
		ArtifactName: Databases
		PathtoPublish: '$(build.artifactstagingdirectory)\Databases'
